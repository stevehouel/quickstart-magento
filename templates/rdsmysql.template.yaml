---
AWSTemplateFormatVersion: '2010-09-09'
Description: RDS MySQL Template
Parameters:
  QSS3BucketName:
    AllowedPattern: "^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$"
    ConstraintDescription: "Quick Start bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-)."
    Default: aws-quickstart
    Description: "S3 bucket name for the Quick Start assets. Quick Start bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-)."
    Type: String
  QSS3KeyPrefix:
    AllowedPattern: "^[0-9a-zA-Z-/]*$"
    ConstraintDescription: "Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/)."
    Default: ''
    Description: "S3 key prefix for the Quick Start assets. Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/)."
    Type: String
  DBAllocatedStorage:
    ConstraintDescription: must be between 5 and 4096 GiB. If Iops specified, AllocatedStorage
      must be at least 100 GiB and with minimum Iops value of 1000
    Default: '5'
    Description: The size of the database in gigabytes (GiB)
    MaxValue: '4096'
    MinValue: '5'
    Type: Number
  DBAutoMinorVersionUpgrade:
    AllowedValues:
    - 'true'
    - 'false'
    Default: 'true'
    Description: Select true/false to setup Auto Minor Version upgrade
    Type: String
  DBBackupRetentionPeriod:
    Default: '7'
    Description: The number of days for which automatic DB snapshots are retained.
    Type: String
  DBInstanceClass:
    Default: db.m5.large
    Description: The name of the compute and memory capacity class of the DB instance.
    Type: String
  DBIops:
    AllowedValues:
    - '1000'
    - '2000'
    - '3000'
    - '4000'
    - '5000'
    - '6000'
    - '7000'
    - '8000'
    - '9000'
    - '10000'
    ConstraintDescription: '1000 Iops min and increased in 1K increments. '
    Default: '1000'
    Description: DB Iops. Used only when io1 specified for the StorageType property
    Type: Number
  DBMasterUserPassword:
    AllowedPattern: (?=^.{6,255}$)((?=.*\d)(?=.*[A-Z])(?=.*[a-z])|(?=.*\d)(?=.*[^A-Za-z0-9])(?=.*[a-z])|(?=.*[^A-Za-z0-9])(?=.*[A-Z])(?=.*[a-z])|(?=.*\d)(?=.*[A-Z])(?=.*[^A-Za-z0-9]))^.*
    ConstraintDescription: Min 8 chars.
    Description: The database admin account password
    MaxLength: '64'
    MinLength: '8'
    NoEcho: 'True'
    Type: String
  DBMasterUsername:
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric
      characters.
    Default: admin
    Description: The database admin account username
    MaxLength: '16'
    MinLength: '1'
    NoEcho: 'true'
    Type: String
  DBMultiAZ:
    AllowedValues:
    - 'true'
    - 'false'
    Default: 'true'
    Description: Specifies if the database instance is a multiple Availability Zone
      deployment.
    Type: String
  EnablePI:
    AllowedValues:
    - 'true'
    - 'false'
    Default: 'true'
    Description: Enable Performance Insights
    Type: String
  DBName:
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    Default: QuickstartMySQLDB
    Description: Name of MySQL DB for Magento Stack
    MaxLength: '64'
    MinLength: '5'
    Type: String
  DBStorageType:
    AllowedValues:
    - standard
    - gp2
    - io1
    Default: standard
    Description: The storage type associated with this database instance
    Type: String
  CustomDBSecurityGroup:
    Description: MySql Security Group
    Type: AWS::EC2::SecurityGroup::Id
  Subnet1ID:
    Description: The ID of the private subnet in Availability Zone 1.
    Type: 'AWS::EC2::Subnet::Id'
  Subnet2ID:
    Description: The ID of the private subnet in Availability Zone 2.
    Type: 'AWS::EC2::Subnet::Id'
  VPCID:
    Description: "ID of the VPC you are deploying Aurora into (e.g., vpc-0343606e)."
    Type: 'AWS::EC2::VPC::Id'
    Default: ''
  DBAllocatedStorageEncrypted:
    Default: "true"
    AllowedValues:
      - "true"
      - "false"
    Description: Whether or not to encrypt the database.
    Type: String
  RotateDBPassword:
    Default: "false"
    AllowedValues:
      - "true"
      - "false"
    Description: Whether or not to rotate the database password on a schedule (every 89 days).
    Type: String
  DBSnapshotIdentifier:
    Default: ''
    Description: DB Snapshot ARN
    Type: String
  EnvironmentStage:
    Type: String
    Description: Designates the environment stage of the associated AWS resource. (Optional)
    AllowedValues:
      - dev
      - test
      - pre-prod
      - prod
      - none
    Default: none
  Application:
    Type: String
    Default: ''
    Description: Designates the application of the associated AWS resource. (Optional)
  ApplicationVersion:
    Type: String
    Description: Dsignates the specific version of the application. (Optional)
    Default: ''
  ProjectCostCenter:
    Type: String
    Default: ''
    Description: Designates the cost center associated with the project of the given AWS resource. (Optional)
  Confidentiality:
    Type: String
    Default: ''
    Description: Designates the confidentiality classification of the data that is associated with the resource. (Optional)
    AllowedValues:
      - public
      - private
      - confidential
      - pii/phi
      - ''
  Compliance:
    Type: String
    Default: ''
    Description: Designates the compliance level for the AWS resource. (Optional)
    AllowedValues:
      - hipaa
      - sox
      - fips
      - other
      - ''
  NotificationList:
    Type: String
    Default: 'db-ops@domain.com'
    Description: The email notification used to configure an SNS topic for sending CloudWatch alarm and RDS event notifications.
    AllowedPattern: '^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$'
    ConstraintDescription: Provide a valid email address.
Conditions:
  DBPasswordRotation:
    !Equals
    - !Ref RotateDBPassword
    - 'true'
  
  UseDBSnapshot:
    !Not
    - !Equals
      - !Ref DBSnapshotIdentifier
      - ''

  IOPSStorageType:
    !Equals
    - !Ref DBStorageType
    - io1
  UseDatabaseEncryption:
    !Equals
    - !Ref DBAllocatedStorageEncrypted
    - true
  EnablePI:
    !Equals
    - !Ref EnablePI
    - 'true'
Resources:
  MonitoringIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "monitoring.rds.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonRDSEnhancedMonitoringRole
  DBSNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
        - Endpoint: !Ref NotificationList
          Protocol: email
  EncryptionKey:
    DeletionPolicy: Retain
    Type: AWS::KMS::Key
    Properties:
      KeyPolicy:
        Version: 2012-10-17
        Id: !Ref AWS::StackName
        Statement:
          - Effect: Allow
            Principal:
              AWS:
                - !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action: 'kms:*'
            Resource: '*'
          - Effect: Allow
            Principal:
              AWS: '*'
            Action:
              - 'kms:Encrypt'
              - 'kms:Decrypt'
              - 'kms:ReEncrypt*'
              - 'kms:GenerateDataKey*'
              - 'kms:CreateGrant'
              - 'kms:ListGrants'
              - 'kms:DescribeKey'
            Resource: '*'
            Condition:
              StringEquals:
                'kms:CallerAccount': !Ref 'AWS::AccountId'
                'kms:ViaService': !Sub 'rds.${AWS::Region}.amazonaws.com'
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
  EncryptionKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub "alias/${AWS::StackName}"
      TargetKeyId: !Ref EncryptionKey
  MySQLDBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnets available for the RDS MySQL DB Instance
      SubnetIds:
        - !Ref Subnet1ID
        - !Ref Subnet2ID
  MySQLDB:
    Type: AWS::RDS::DBInstance
    Properties:
      DBName: !Ref DBName
      AllocatedStorage: !Ref DBAllocatedStorage
      DBSnapshotIdentifier: !If [UseDBSnapshot, !Ref DBSnapshotIdentifier, !Ref 'AWS::NoValue']
      DBInstanceClass: !Ref DBInstanceClass
      Engine: MySQL
      EngineVersion: '8.0'
      StorageEncrypted: !If [UseDatabaseEncryption, !Ref DBAllocatedStorageEncrypted, !Ref 'AWS::NoValue']
      KmsKeyId: !If [UseDatabaseEncryption, !GetAtt EncryptionKey.Arn, !Ref 'AWS::NoValue']
      MasterUsername: !Ref DBMasterUsername
      MasterUserPassword:
        !If
        - DBPasswordRotation
        - !Join ['', ['{{resolve:secretsmanager:', !Ref RDSInstanceRotationSecret, '::password}}' ]]
        - !Ref DBMasterUserPassword
      DBSubnetGroupName: !Ref MySQLDBSubnetGroup
      VPCSecurityGroups:
      - !Ref CustomDBSecurityGroup
      MultiAZ: !Ref DBMultiAZ
      StorageType: !Ref DBStorageType
      AutoMinorVersionUpgrade: !Ref DBAutoMinorVersionUpgrade
      BackupRetentionPeriod: !Ref DBBackupRetentionPeriod
      MonitoringInterval: 1
      MonitoringRoleArn: !GetAtt MonitoringIAMRole.Arn
      EnablePerformanceInsights: !If [EnablePI, true, !Ref 'AWS::NoValue']
      PerformanceInsightsKMSKeyId: !If [EnablePI, !Ref EncryptionKey, !Ref 'AWS::NoValue']
      PerformanceInsightsRetentionPeriod: !If [EnablePI, 7, !Ref 'AWS::NoValue']
      CopyTagsToSnapshot: true
      Iops:
        !If
        - IOPSStorageType
        - !Ref DBIops
        - !Ref AWS::NoValue
      Tags:
        -
          Key: Name
          Value: !Sub RDSDB-${AWS::StackName}
        -
          Key: EnvironmentStage
          Value: !Ref EnvironmentStage
        -
          Key: Application
          Value: !Ref Application
        -
          Key: ApplicationVersion
          Value: !Ref ApplicationVersion
        -
          Key: ProjectCostCenter
          Value: !Ref ProjectCostCenter
        -
          Key: Confidentiality
          Value: !Ref Confidentiality
        -
          Key: Compliance
          Value: !Ref Compliance
  RDSInstanceRotationSecret:
    Condition: DBPasswordRotation
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: !Join ['', ['RDS MySQL Master User Secret ', 'for CloudFormation Stack ', !Ref 'AWS::StackName']]
      GenerateSecretString:
        SecretStringTemplate: !Sub '{"username": "${DBMasterUsername}"}'
        GenerateStringKey: "password"
        PasswordLength: 16
        ExcludeCharacters: "\"'@/\\"
  SecretRDSInstanceAttachment:
    Condition: DBPasswordRotation
    Type: AWS::SecretsManager::SecretTargetAttachment
    Properties:
      SecretId: !Ref RDSInstanceRotationSecret
      TargetId: !Ref MySQLDB
      TargetType: AWS::RDS::DBInstance
  RDSSecretRotationSchedule:
    Condition: DBPasswordRotation
    Type: AWS::SecretsManager::RotationSchedule
    DependsOn:
      - SecretRDSInstanceAttachment
    Properties:
      SecretId: !Ref RDSInstanceRotationSecret
      RotationLambdaARN: !GetAtt RDSRotationLambda.Arn
      RotationRules:
        AutomaticallyAfterDays: 89
  RDSRotationLambda:
    Condition: DBPasswordRotation
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.7
      Role: !GetAtt LambdaExecutionRole.Arn
      Handler: lambda_function.lambda_handler
      Description: 'This is a lambda to rotate MySql user passwd'
      Environment:
        Variables:
          SECRETS_MANAGER_ENDPOINT: !Sub 'https://secretsmanager.${AWS::Region}.amazonaws.com'
      VpcConfig:
        SecurityGroupIds: !Ref CustomDBSecurityGroup
        SubnetIds:
          - !Ref Subnet1ID
          - !Ref Subnet2ID
      Code:
        S3Bucket: !Ref QSS3BucketName
        S3Key: !Sub '${QSS3KeyPrefix}code/SSMRotateLambda/lambda.zip'
      Timeout: 300
  LambdaExecutionRole:
    Condition: DBPasswordRotation
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - secretsmanager.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        - arn:aws:iam::aws:policy/SecretsManagerReadWrite
      Path: /
      Policies:
        - PolicyName: lambda_policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: "Allow"
                Action:
                  - "secretsmanager:DescribeSecret"
                  - "secretsmanager:GetSecretValue"
                  - "secretsmanager:PutSecretValue"
                  - "secretsmanager:UpdateSecretVersionStage"
                Resource: !Sub 'arn:${AWS::Partition}:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:*'
                Condition:
                  StringEquals:
                    secretsmanager:resource/AllowRotationLambdaArn: !Sub 'arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:SecretsManager-SecretRotation-${AWS::StackName}'
              - Effect: "Allow"
                Action:
                  - "secretsmanager:GetRandomPassword"
                Resource: "*"
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - cloudformation:DescribeStacks
                Resource: '*'
  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Condition: DBPasswordRotation
    DependsOn: RDSRotationLambda
    Properties:
      FunctionName: !GetAtt RDSRotationLambda.Arn
      Action: 'lambda:InvokeFunction'
      Principal: secretsmanager.amazonaws.com
Outputs:
  RDSEndPoints:
    Description: Amazon RDS Endpoint to connect
    Value: !Sub ${MySQLDB.Endpoint.Address}:${MySQLDB.Endpoint.Port}/${DBName}
  DBName:
    Description: MySQL DBName
    Value: !Ref DBName
  RDSEndPointAddress:
    Description: Amazon RDS Endpoint to connect
    Value: !Sub ${MySQLDB.Endpoint.Address}
  RDSEndPointPort:
    Description: Amazon RDS Endpoint to connect
    Value: !Sub ${MySQLDB.Endpoint.Port}
  RDSMasterUserSecret:
    Condition: DBPasswordRotation
    Description: "RDS Master User Secret ARN stored in AWS Secrets Manager"
    Value: !Ref RDSInstanceRotationSecret
...
